(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{419:function(e,t,a){"use strict";a.r(t);var r=a(10),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"websocket的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket的使用"}},[e._v("#")]),e._v(" WebSocket的使用")]),e._v(" "),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),t("h3",{attrs:{id:"消息代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息代理"}},[e._v("#")]),e._v(" 消息代理")]),e._v(" "),t("h3",{attrs:{id:"stomp协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stomp协议"}},[e._v("#")]),e._v(" STOMP协议")]),e._v(" "),t("p",[e._v("STOMP（Simple Text Oriented Messaging Protocol）是一个简单的文本导向的消息协议，它被设计用来在客户端和服务器之间发送和接收消息。STOMP协议本身是基于文本的，它定义了一系列简单的命令，这些命令用于订阅、发送和发布消息。")]),e._v(" "),t("p",[t("strong",[e._v("主要特点：")])]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("简单性")]),e._v("：STOMP协议的语法简单明了，易于理解和实现。")]),e._v(" "),t("li",[t("strong",[e._v("文本导向")]),e._v("：使用文本消息格式，如JSON或XML，便于调试和理解。")]),e._v(" "),t("li",[t("strong",[e._v("命令导向")]),e._v("：通过一系列预定义的命令（例如"),t("code",[e._v("CONNECT")]),e._v(", "),t("code",[e._v("SEND")]),e._v(", "),t("code",[e._v("SUBSCRIBE")]),e._v(", "),t("code",[e._v("UNSUBSCRIBE")]),e._v(", "),t("code",[e._v("ACK")]),e._v(", "),t("code",[e._v("NACK")]),e._v("）进行交互。")]),e._v(" "),t("li",[t("strong",[e._v("无状态性")]),e._v("：每次命令执行后，客户端和服务器之间的连接会保持开放状态，直到另一端关闭连接。")]),e._v(" "),t("li",[t("strong",[e._v("可扩展性")]),e._v("：虽然STOMP协议本身很简单，但它允许通过头部字段扩展协议，以支持额外的功能和消息格式。")])]),e._v(" "),t("h2",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),t("h3",{attrs:{id:"注解的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解的使用"}},[e._v("#")]),e._v(" 注解的使用")]),e._v(" "),t("p",[e._v("情况1：如果只需要进行简单的通信，不需要消息代理和STOMP协议支持，那么只需要实现"),t("code",[e._v("WebSocketConfigurer")]),e._v("接口，使用的注解是"),t("code",[e._v("@EnableWebSocket")])]),e._v(" "),t("p",[e._v("情况2：情况2：如果需要消息代理和STOMP协议支持，那么需要实现"),t("code",[e._v("WebSocketMessageBrokerConfigurer")]),e._v("接口，使用的注解是"),t("code",[e._v("@EnableWebSocketMessageBroker")])]),e._v(" "),t("p",[e._v("情况3: 如果你的应用需要同时支持简单的WebSocket连接和基于STOMP的消息处理，可以同时实现这两个接口")]),e._v(" "),t("h2",{attrs:{id:"问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[e._v("#")]),e._v(" 问题")]),e._v(" "),t("h3",{attrs:{id:"注解使用错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解使用错误"}},[e._v("#")]),e._v(" 注解使用错误")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.ApplicationContextException: Failed to start bean 'subProtocolWebSocketHandler'; nested exception is java.lang.IllegalArgumentException: No handlers")])]),e._v(" "),t("p",[e._v("例如实现的接口是"),t("code",[e._v("WebSocketConfigurer")]),e._v("，结果使用的注解是"),t("code",[e._v("@EnableWebSocketMessageBroker")])])])}),[],!1,null,null,null);t.default=s.exports}}]);